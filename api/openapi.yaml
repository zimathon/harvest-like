openapi: 3.0.3
info:
  title: Harvest-like Time Tracking API
  description: API for time tracking, project management, and invoicing
  version: 2.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:5001/api/v2
    description: Local development server (Firestore)
  - url: http://localhost:5001/api
    description: Local development server (MongoDB)
  - url: https://api.harvest-like.com/v2
    description: Production server

security:
  - bearerAuth: []

tags:
  - name: auth
    description: Authentication operations
  - name: users
    description: User management
  - name: projects
    description: Project management
  - name: time-entries
    description: Time tracking entries
  - name: clients
    description: Client management
  - name: expenses
    description: Expense tracking
  - name: invoices
    description: Invoice management
  - name: reports
    description: Reporting endpoints

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags:
        - auth
      summary: Get current user
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags:
        - users
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - users
      summary: Create new user (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /time-entries:
    get:
      tags:
        - time-entries
      summary: Get all time entries (admin only)
      parameters:
        - $ref: '#/components/parameters/UserIdQuery'
        - $ref: '#/components/parameters/ProjectIdQuery'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
      responses:
        '200':
          description: List of time entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntriesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - time-entries
      summary: Create a new time entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTimeEntryRequest'
      responses:
        '201':
          description: Time entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /time-entries/me:
    get:
      tags:
        - time-entries
      summary: Get current user's time entries
      parameters:
        - $ref: '#/components/parameters/ProjectIdQuery'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
      responses:
        '200':
          description: List of user's time entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntriesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /time-entries/timer/start:
    post:
      tags:
        - time-entries
      summary: Start timer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTimerRequest'
      responses:
        '201':
          description: Timer started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /time-entries/timer/stop:
    put:
      tags:
        - time-entries
      summary: Stop timer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
                  description: Optional notes to add when stopping
      responses:
        '200':
          description: Timer stopped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /time-entries/{id}:
    get:
      tags:
        - time-entries
      summary: Get specific time entry
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Time entry details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - time-entries
      summary: Update time entry
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTimeEntryRequest'
      responses:
        '200':
          description: Time entry updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - time-entries
      summary: Delete time entry
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Time entry deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /projects:
    get:
      tags:
        - projects
      summary: Get all projects
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - projects
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /projects/{id}:
    get:
      tags:
        - projects
      summary: Get specific project
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - projects
      summary: Update project
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - projects
      summary: Delete project
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Project deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IdPath:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Resource ID

    UserIdQuery:
      name: user
      in: query
      schema:
        type: string
      description: Filter by user ID

    ProjectIdQuery:
      name: project
      in: query
      schema:
        type: string
      description: Filter by project ID

    StartDate:
      name: startDate
      in: query
      schema:
        type: string
        format: date
      description: Start date filter (YYYY-MM-DD)

    EndDate:
      name: endDate
      in: query
      schema:
        type: string
        format: date
      description: End date filter (YYYY-MM-DD)

  schemas:
    # Common schemas
    BaseResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            error:
              type: string
            message:
              type: string

    # Auth schemas
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
    
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
          minLength: 2
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        role:
          type: string
          enum: [admin, user]
          default: user

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            token:
              type: string
            user:
              $ref: '#/components/schemas/User'

    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, user]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    UsersResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'
    
    UserResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/User'

    # Project schemas
    Task:
      type: object
      properties:
        id:
          type: string
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        rate:
          type: number
        isBillable:
          type: boolean

    ProjectMember:
      type: object
      properties:
        user:
          type: string
        role:
          type: string
          enum: [owner, member]

    Project:
      type: object
      properties:
        id:
          type: string
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        client:
          type: string
        clientName:
          type: string
          description: The name of the client (populated from client ID)
        status:
          type: string
          enum: [active, completed, on-hold]
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        budget:
          type: number
        hourlyRate:
          type: number
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMember'
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        client:
          type: string
        status:
          type: string
          enum: [active, completed, on-hold]
          default: active
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        budget:
          type: number
        hourlyRate:
          type: number
        tasks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              rate:
                type: number
              isBillable:
                type: boolean

    UpdateProjectRequest:
      $ref: '#/components/schemas/CreateProjectRequest'

    ProjectResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'

    ProjectsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            count:
              type: integer
            data:
              type: array
              items:
                $ref: '#/components/schemas/Project'

    # Time Entry schemas
    TimeEntry:
      type: object
      properties:
        id:
          type: string
        _id:
          type: string
        userId:
          type: string
        user:
          $ref: '#/components/schemas/User'
        projectId:
          type: string
        project:
          $ref: '#/components/schemas/Project'
        task:
          type: string
        taskId:
          type: string
        date:
          type: string
          format: date
        startTime:
          oneOf:
            - type: string
              format: date-time
            - type: object
              properties:
                _seconds:
                  type: number
                _nanoseconds:
                  type: number
        endTime:
          oneOf:
            - type: string
              format: date-time
            - type: object
              properties:
                _seconds:
                  type: number
                _nanoseconds:
                  type: number
        duration:
          type: number
          description: Duration in seconds
        hours:
          type: number
          description: Duration in hours
        notes:
          type: string
        description:
          type: string
        isBillable:
          type: boolean
        isRunning:
          type: boolean
        projectName:
          type: string
        createdAt:
          oneOf:
            - type: string
              format: date-time
            - type: object
              properties:
                _seconds:
                  type: number
                _nanoseconds:
                  type: number
        updatedAt:
          oneOf:
            - type: string
              format: date-time
            - type: object
              properties:
                _seconds:
                  type: number
                _nanoseconds:
                  type: number

    CreateTimeEntryRequest:
      type: object
      required:
        - projectId
        - task
        - date
        - hours
      properties:
        projectId:
          type: string
        task:
          type: string
        date:
          type: string
          format: date
        hours:
          type: number
        description:
          type: string
        notes:
          type: string
        isBillable:
          type: boolean

    UpdateTimeEntryRequest:
      type: object
      properties:
        projectId:
          type: string
        task:
          type: string
        date:
          type: string
          format: date
        hours:
          type: number
        description:
          type: string
        notes:
          type: string
        isBillable:
          type: boolean

    StartTimerRequest:
      type: object
      required:
        - projectId
        - task
      properties:
        projectId:
          type: string
        task:
          type: string
        taskId:
          type: string
        notes:
          type: string
        isBillable:
          type: boolean

    TimeEntryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/TimeEntry'

    TimeEntriesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            count:
              type: integer
            data:
              type: array
              items:
                $ref: '#/components/schemas/TimeEntry'

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'