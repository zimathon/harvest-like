/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description User registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current user details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UsersResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        /** Create new user (admin only) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateUserRequest"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all time entries (admin only) */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by user ID */
                    user?: components["parameters"]["UserIdQuery"];
                    /** @description Filter by project ID */
                    project?: components["parameters"]["ProjectIdQuery"];
                    /** @description Start date filter (YYYY-MM-DD) */
                    startDate?: components["parameters"]["StartDate"];
                    /** @description End date filter (YYYY-MM-DD) */
                    endDate?: components["parameters"]["EndDate"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of time entries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeEntriesResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        /** Create a new time entry */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTimeEntryRequest"];
                };
            };
            responses: {
                /** @description Time entry created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeEntryResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-entries/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user's time entries */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by project ID */
                    project?: components["parameters"]["ProjectIdQuery"];
                    /** @description Start date filter (YYYY-MM-DD) */
                    startDate?: components["parameters"]["StartDate"];
                    /** @description End date filter (YYYY-MM-DD) */
                    endDate?: components["parameters"]["EndDate"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of user's time entries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeEntriesResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-entries/timer/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start timer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["StartTimerRequest"];
                };
            };
            responses: {
                /** @description Timer started */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeEntryResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-entries/timer/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Stop timer */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Optional notes to add when stopping */
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Timer stopped */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeEntryResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-entries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get specific time entry */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Resource ID */
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Time entry details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeEntryResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        /** Update time entry */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Resource ID */
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTimeEntryRequest"];
                };
            };
            responses: {
                /** @description Time entry updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeEntryResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        post?: never;
        /** Delete time entry */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Resource ID */
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Time entry deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all projects */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectsResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        /** Create a new project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProjectRequest"];
                };
            };
            responses: {
                /** @description Project created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get specific project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Resource ID */
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        /** Update project */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Resource ID */
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProjectRequest"];
                };
            };
            responses: {
                /** @description Project updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        post?: never;
        /** Delete project */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Resource ID */
                    id: components["parameters"]["IdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseResponse: {
            success: boolean;
        };
        SuccessResponse: components["schemas"]["BaseResponse"] & {
            data?: Record<string, never>;
        };
        ErrorResponse: components["schemas"]["BaseResponse"] & {
            error?: string;
            message?: string;
        };
        RegisterRequest: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
        };
        CreateUserRequest: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
            /**
             * @default user
             * @enum {string}
             */
            role: "admin" | "user";
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        AuthResponse: components["schemas"]["BaseResponse"] & {
            token?: string;
            user?: components["schemas"]["User"];
        };
        User: {
            id?: string;
            _id?: string;
            name?: string;
            /** Format: email */
            email?: string;
            /** @enum {string} */
            role?: "admin" | "user";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UsersResponse: components["schemas"]["BaseResponse"] & {
            data?: components["schemas"]["User"][];
        };
        UserResponse: components["schemas"]["BaseResponse"] & {
            data?: components["schemas"]["User"];
        };
        Task: {
            id?: string;
            _id?: string;
            name?: string;
            description?: string;
            rate?: number;
            isBillable?: boolean;
        };
        ProjectMember: {
            user?: string;
            /** @enum {string} */
            role?: "owner" | "member";
        };
        Project: {
            id?: string;
            _id?: string;
            name?: string;
            description?: string;
            client?: string;
            /** @description The name of the client (populated from client ID) */
            clientName?: string;
            /** @enum {string} */
            status?: "active" | "completed" | "on-hold";
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            budget?: number;
            hourlyRate?: number;
            tasks?: components["schemas"]["Task"][];
            members?: components["schemas"]["ProjectMember"][];
            userId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateProjectRequest: {
            name: string;
            description?: string;
            client?: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "completed" | "on-hold";
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            budget?: number;
            hourlyRate?: number;
            tasks?: {
                name?: string;
                description?: string;
                rate?: number;
                isBillable?: boolean;
            }[];
        };
        UpdateProjectRequest: components["schemas"]["CreateProjectRequest"];
        ProjectResponse: components["schemas"]["BaseResponse"] & {
            data?: components["schemas"]["Project"];
        };
        ProjectsResponse: components["schemas"]["BaseResponse"] & {
            count?: number;
            data?: components["schemas"]["Project"][];
        };
        TimeEntry: {
            id?: string;
            _id?: string;
            userId?: string;
            user?: components["schemas"]["User"];
            projectId?: string;
            project?: components["schemas"]["Project"];
            task?: string;
            taskId?: string;
            /** Format: date */
            date?: string;
            startTime?: string | {
                _seconds?: number;
                _nanoseconds?: number;
            };
            endTime?: string | {
                _seconds?: number;
                _nanoseconds?: number;
            };
            /** @description Duration in seconds */
            duration?: number;
            /** @description Duration in hours */
            hours?: number;
            notes?: string;
            description?: string;
            isBillable?: boolean;
            isRunning?: boolean;
            projectName?: string;
            createdAt?: string | {
                _seconds?: number;
                _nanoseconds?: number;
            };
            updatedAt?: string | {
                _seconds?: number;
                _nanoseconds?: number;
            };
        };
        CreateTimeEntryRequest: {
            projectId: string;
            task: string;
            /** Format: date */
            date: string;
            hours: number;
            description?: string;
            notes?: string;
            isBillable?: boolean;
        };
        UpdateTimeEntryRequest: {
            projectId?: string;
            task?: string;
            /** Format: date */
            date?: string;
            hours?: number;
            description?: string;
            notes?: string;
            isBillable?: boolean;
        };
        StartTimerRequest: {
            projectId: string;
            task: string;
            taskId?: string;
            notes?: string;
            isBillable?: boolean;
        };
        TimeEntryResponse: components["schemas"]["BaseResponse"] & {
            data?: components["schemas"]["TimeEntry"];
        };
        TimeEntriesResponse: components["schemas"]["BaseResponse"] & {
            count?: number;
            data?: components["schemas"]["TimeEntry"][];
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: {
        /** @description Resource ID */
        IdPath: string;
        /** @description Filter by user ID */
        UserIdQuery: string;
        /** @description Filter by project ID */
        ProjectIdQuery: string;
        /** @description Start date filter (YYYY-MM-DD) */
        StartDate: string;
        /** @description End date filter (YYYY-MM-DD) */
        EndDate: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
